{"version":3,"sources":["Todo.js","NewTodoForm.js","EditTodoForm.js","TodoList.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["Todo","id","text","complete","removeTodo","toggleEditing","toggleComplete","key","className","onClick","e","NewTodoForm","addTodo","INITIAL_STATE","useState","todoData","setTodoData","onSubmit","preventDefault","htmlFor","type","name","placeholder","value","onChange","target","EditTodoForm","editTodo","TodoList","todos","useSelector","state","dispatch","useDispatch","updateLocalStorage","updatedTodos","localStorage","setItem","JSON","stringify","parse","getItem","filter","todo","find","payload","editing","newTodo","uuid","map","checkIfEditing","App","Boolean","window","location","hostname","match","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5dbdaebc.chunk.js","sourcesContent":["import React from 'react';\nimport './Todo.css';\n\n/**\n * returns a div with the todo text, an edit and remove button  \n */\n\nconst Todo = ({ id, text, complete, removeTodo, toggleEditing, toggleComplete }) => {\n\tconst handleRemove = (e) => {\n\t\tremoveTodo(id);\n\t};\n\tconst handleEdit = (e) => {\n\t\ttoggleEditing(id);\n\t};\n\n\tconst handleComplete = (e) => {\n\t\ttoggleComplete(id);\n\t};\n\treturn (\n\t\t<div key={id} id={id} className=\"Todo\">\n\t\t\t<span onClick={handleComplete} className={`Todo-Text ${complete ? 'complete' : ''}`}>\n\t\t\t\t{text}\n\t\t\t</span>\n\t\t\t<button className=\"Todo-Edit\" onClick={handleEdit}>\n\t\t\t\tEdit\n\t\t\t</button>\n\t\t\t<button className=\"Todo-Remove\" onClick={handleRemove}>\n\t\t\t\tâ…¹\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\n\n/**\n * NewTodoForm - this component renders a form with one \n * text input for the task to be created. When this form is \n * submitted, a new Todo component is be created. \n */\nconst NewTodoForm = ({ addTodo }) => {\n\tconst INITIAL_STATE = { text: '' };\n\tconst [ todoData, setTodoData ] = useState(INITIAL_STATE);\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetTodoData((todoData) => ({ ...todoData, [name]: value }));\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\taddTodo(todoData);\n\t\tsetTodoData(INITIAL_STATE);\n\t};\n\n\treturn (\n\t\t<div className=\"NewTodoForm\">\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<label htmlFor=\"text\">Add To do: </label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid=\"text\"\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tplaceholder=\"Eat Breakfast...\"\n\t\t\t\t\tvalue={todoData.text}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t\t<button className=\"NewTodoForm-Add\">Add</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default NewTodoForm;\n","import React, { useState } from 'react';\n\n/**\n * EditTodoForm - this component renders a form with one \n * text input for the task to be edited. When this form is \n * submitted, a current todo component is be updated. \n */\nconst EditTodoForm = ({ editTodo, text, id }) => {\n\tconst INITIAL_STATE = { text, id };\n\tconst [ todoData, setTodoData ] = useState(INITIAL_STATE);\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetTodoData((todoData) => ({ ...todoData, [name]: value }));\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\teditTodo(todoData);\n\t};\n\n\treturn (\n\t\t<div className=\"EditTodoForm\">\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<label htmlFor=\"text\">Edit: </label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid=\"text\"\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tplaceholder=\"Lunch...\"\n\t\t\t\t\tvalue={todoData.text}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t\t<button className=\"EditTodoForm-Button\">Save</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default EditTodoForm;\n","import React from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport EditTodoForm from './EditTodoForm';\nimport { v4 as uuid } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\n\n/**\n * TodoList - this component renders the NewTodoForm component \n * and a list of Todo components. \n */\n\nconst TodoList = () => {\n\tconst todos = useSelector((state) => state.todos);\n\tconst dispatch = useDispatch();\n\n\tconst addTodo = ({ text }) => {\n\t\tif (!text) return;\n\t\tconst newTodo = { text, id: uuid(), complete: false, editing: false };\n\t\tconst updatedTodos = [ ...todos, newTodo ];\n\t\tupdateLocalStorage(updatedTodos);\n\t\tdispatch({ type: 'ADD_TODO', payload: newTodo });\n\t};\n\n\tconst updateLocalStorage = (updatedTodos) => {\n\t\tlocalStorage.setItem('todos', JSON.stringify(updatedTodos));\n\t};\n\n\tconst removeTodo = (id) => {\n\t\tconst storedTodos = JSON.parse(localStorage.getItem('todos'));\n\t\tconst updatedTodos = storedTodos.filter((todo) => todo.id !== id);\n\t\tupdateLocalStorage(updatedTodos);\n\t\tdispatch({ type: 'REMOVE_TODO', id });\n\t};\n\n\tconst toggleComplete = (id) => {\n\t\tconst todo = todos.find((todo) => todo.id === id);\n\t\ttodo.complete = !todo.complete;\n\t\tconst updatedTodos = [ ...todos ];\n\t\tupdateLocalStorage(updatedTodos);\n\t\tdispatch({ type: 'TOGGLE_COMPLETE', payload: updatedTodos });\n\t};\n\n\tconst toggleEditing = (id) => {\n\t\tconst todo = todos.find((todo) => todo.id === id);\n\t\ttodo.editing = !todo.editing;\n\t\tconst updatedTodos = [ ...todos ];\n\t\tupdateLocalStorage(updatedTodos);\n\t\tdispatch({ type: 'TOGGLE_EDITING', payload: updatedTodos });\n\t};\n\n\tconst editTodo = ({ id, text }) => {\n\t\tif (!text) return;\n\t\tconst todo = todos.find((todo) => todo.id === id);\n\t\ttodo.editing = !todo.editing;\n\t\ttodo.text = text;\n\t\tconst updatedTodos = [ ...todos ];\n\t\tupdateLocalStorage(updatedTodos);\n\t\tdispatch({ type: 'EDIT_TODOS', payload: updatedTodos });\n\t};\n\n\tconst checkIfEditing = (todo) => {\n\t\treturn todo.editing ? (\n\t\t\t<EditTodoForm text={todo.text} id={todo.id} editTodo={editTodo} key={todo.id} />\n\t\t) : (\n\t\t\t<Todo\n\t\t\t\ttext={todo.text}\n\t\t\t\tkey={todo.id}\n\t\t\t\tid={todo.id}\n\t\t\t\tcomplete={todo.complete}\n\t\t\t\tremoveTodo={removeTodo}\n\t\t\t\ttoggleEditing={toggleEditing}\n\t\t\t\ttoggleComplete={toggleComplete}\n\t\t\t/>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"TodoList\">\n\t\t\t<h1 className=\"TodoList-Header\">My To Do List</h1>\n\t\t\t<NewTodoForm addTodo={addTodo} />\n\t\t\t<div className=\"TodoList-Container\">{todos.map((todo) => checkIfEditing(todo))}</div>\n\t\t</div>\n\t);\n};\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TodoList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = JSON.parse(localStorage.getItem('todos')) || [];\nconst INITIAL_STATE = { todos };\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_TODO':\n\t\t\treturn { ...state, todos: [ ...state.todos, action.payload ] };\n\t\tcase 'REMOVE_TODO':\n\t\t\treturn { ...state, todos: state.todos.filter((todo) => todo.id !== action.id) };\n\t\tcase 'TOGGLE_COMPLETE':\n\t\t\treturn { ...state, todos: action.payload };\n\t\tcase 'TOGGLE_EDITING':\n\t\t\treturn { ...state, todos: action.payload };\n\t\tcase 'EDIT_TODOS':\n\t\t\treturn { ...state, todos: action.payload };\n\t\tcase 'REMOVE_ALL':\n\t\t\treturn { ...state, todos: [] };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}